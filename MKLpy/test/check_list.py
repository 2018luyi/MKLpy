"""
.. codeauthor:: Ivano Lauriola <ivanolauriola@gmail.com>

================================
Check kernel_list and generators
================================

.. currentmodule:: MKLpy.test.check_list

tests over kernel_list, HPK_generator and SFK_generator from MKLpy.lists

The following is a complete list of tests performerd:
* initialize an empty kernel_list;
* initialize a kernel_list using SFK_generator;
* check if make_a_list(n) performs exactly n kernels;
* check if a kernel_list generated from another kernel_list contains the same kernels;
* check if shape works correctly;
* check if shape works correctly when the list is generated from another kernel_list;
* check if __getitem__ returns a kernel matrix;
* check if __getitem__ returns an ndarray with proper dimension;
* check if the first kernel from HPK_generator is a linear kernel;
* check if the (i+1)-th kernel from HPK_generator is an HPK with degree i+1;
* check if SFK_generator works with default params;
* check if SFK_generator use the correct number of features;
* check if SFK_generator returns a kernel performed with the proper kernel function an parameters;
* check if SFK_generator works well with custom parameters;
* check if SFK_generator works well with a callable as input;
* check if to_array() returns an ndarray with proper shapes;
* check if to_array() return the correct array of kernels;
* check the concatenation of 2 kernel_list;
* check if multiplication and division works correctly in kernel_list with a scalar;
* (NOT PASS) check if multiplication and division works correctly in kernel_list with a vector;
* check if kernel_list.edit function works correctly with a simple transformation, normalization and kernel centering;

Note: all checks are performed using 1 and 2 (train and test) kernel matrices.
"""

from sklearn.metrics.pairwise import linear_kernel, polynomial_kernel, rbf_kernel
from sklearn.datasets import load_iris,load_digits
from sklearn.model_selection import train_test_split
import numpy as np
from numpy.testing import assert_array_equal, assert_array_almost_equal, assert_equal
import time
import sys

from MKLpy.lists import kernel_list, HPK_generator, SFK_generator
from MKLpy.regularization import kernel_normalization, kernel_centering


data = load_digits()
X = data.data
Y = data.target
X_tr,X_te,Y_tr,Y_te = train_test_split(X,Y,test_size=.6, random_state=10)
n = 10


def check_init():
    #check if kl can have only tr set as init
    kl = kernel_list(X_tr)
    #check if kl can have tr and test as input
    kl = kernel_list(X_tr,X_te)
    return

def check_generated():
    #check if kl can be generated by a generator with tr set
    kl = SFK_generator(X_tr).make_a_list(n)
    assert_equal(kl.__class__.__name__,'kernel_list')
    kl = HPK_generator(X_tr).make_a_list(n)
    assert_equal(kl.__class__.__name__,'kernel_list')
    #check if kl can be generated by a generator with tr and test as inoput
    kl = SFK_generator(X_tr,X_te).make_a_list(n)
    assert_equal(kl.__class__.__name__,'kernel_list')
    kl = HPK_generator(X_tr,X_te).make_a_list(n)
    assert_equal(kl.__class__.__name__,'kernel_list')
    #check if make_a_list(n) perform exactly n kernels in list
    assert_equal(len(kl),n)
    return

def check_init_from_klist():
    #check if a list generated from an other has the same kernels with only tr
    kl = HPK_generator(X_tr).make_a_list(n)
    kr = kernel_list(X_tr,X_tr,kl)
    assert_array_almost_equal(kl[0],kr[0])
    assert_array_almost_equal(kl[3],kr[3])
    #check if a list generated from an other has the same kernels with tr and test
    kl = HPK_generator(X_tr,X_te).make_a_list(n)
    kr = kernel_list(X_tr,X_te,kl)
    assert_array_almost_equal(kl[2],kr[2])
    assert_array_almost_equal(kl[7],kr[7])
    return

def check_shape():
    #check the shape with only tr
    kl = HPK_generator(X_tr).make_a_list(n)
    assert_equal(kl.shape, (n,X_tr.shape[0],X_tr.shape[0]))
    #check the shape with tr and test
    kl = HPK_generator(X_tr,X_te).make_a_list(n)
    assert_equal(kl.shape, (n,X_te.shape[0],X_tr.shape[0]))
    #check the shape with a klist generated from an other
    kr = kernel_list(X_tr,X_te,kl)
    assert_equal(kr.shape, (n,X_te.shape[0],X_tr.shape[0]))
    assert_equal(kl.shape,kr.shape)
    return

def check_getitem():
    #check if getitem return a valid kernel
    kl = HPK_generator(X_tr).make_a_list(n)
    k = kl[3]
    #check if k is an ndarray
    assert_equal(type(k),np.ndarray)
    #check the shape of the single kernel
    assert_equal(k.shape,(X_tr.shape[0],X_tr.shape[0]))
    #the same with test and SFK
    kl = SFK_generator(X_tr,X_te).make_a_list(n)
    k = kl[4]
    assert_equal(k.shape,(X_te.shape[0],X_tr.shape[0]))
    assert np.min(k) >= 0, 'error: kernel matrix with  a negative value'
    return

def check_HPKs():
    kl = HPK_generator(X_tr).make_a_list(n)
    #check if the first kernel in list has degree 1 and correspond to linear kernel
    assert_array_almost_equal(kl[0],linear_kernel(X_tr))
    assert_array_almost_equal(kl[0],polynomial_kernel(X_tr,degree=1, coef0=0, gamma=1))
    #check if the 4-th element in list is a HPK with degree 4
    assert_array_almost_equal(kl[3],linear_kernel(X_tr)**4)
    assert_array_almost_equal(kl[3],polynomial_kernel(X_tr,degree=4, coef0=0, gamma=1))
    #the same test with tr and test sets
    kl = HPK_generator(X_tr,X_te).make_a_list(n)
    assert_array_almost_equal(kl[2],linear_kernel(X_te,X_tr)**3)
    assert_array_almost_equal(kl[2],polynomial_kernel(X_te,X_tr,degree=3, coef0=0, gamma=1))
    return

def check_SFKs():
    #check if SFK gen works with a default params
    kl = SFK_generator(X_tr).make_a_list(n)
    #check if the list of feature used has the same length defined as input
    kl = SFK_generator(X_tr, n_feature=3).make_a_list(n)
    fl = kl.__getitem__(0,'feature')
    assert_equal(len(kl.__getitem__(0,'feature')),3)
    assert_equal(len(kl.__getitem__(6,'feature')),3)
    #check if a kernel is consistent with his kernel function and the relative feature vector
    kl = SFK_generator(X_tr, n_feature=2, func='rbf').make_a_list(n)
    assert_array_almost_equal(kl[2],rbf_kernel(X_tr[:,kl.__getitem__(2,'feature')]))
    assert_array_almost_equal(kl[5],rbf_kernel(X_tr[:,kl.__getitem__(5,'feature')]))
    #the same with also a test set
    kl = SFK_generator(X_tr,X_te, n_feature=2, func='rbf').make_a_list(n)
    assert_array_almost_equal(kl[3],rbf_kernel(X_te[:,kl.__getitem__(3,'feature')],X_tr[:,kl.__getitem__(3,'feature')]))
    assert_array_almost_equal(kl[8],rbf_kernel(X_te[:,kl.__getitem__(8,'feature')],X_tr[:,kl.__getitem__(8,'feature')]))
    #check if a kernel function with parameters works well
    kl = SFK_generator(X_tr, n_feature=2, func='rbf', params={'gamma':1}).make_a_list(n)
    assert_array_almost_equal(kl[2],rbf_kernel(X_tr[:,kl.__getitem__(2,'feature')],gamma=1))
    assert_array_almost_equal(kl[5],rbf_kernel(X_tr[:,kl.__getitem__(5,'feature')],gamma=1))
    #check if a callable works well
    kl = SFK_generator(X_tr,func=rbf_kernel).make_a_list(n)
    assert_array_almost_equal(kl[2],rbf_kernel(X_tr[:,kl.__getitem__(2,'feature')]))
    #check if a callable with params works well
    kl = SFK_generator(X_tr,func=rbf_kernel,params={'gamma':2}).make_a_list(n)
    assert_array_almost_equal(kl[2],rbf_kernel(X_tr[:,kl.__getitem__(2,'feature')],gamma=2))
    return

def check_SFKs2():
    #check a training list
    kl = SFK_generator(X_tr,func='rbf').make_a_list(20)
    ka = kl.to_array()
    assert_array_almost_equal(kl[0],ka[0])
    assert_array_almost_equal(kl[3],ka[3])
    #check a test list
    #kt = SFK_generator(X_tr,X_te).make_a_list(10)
    kt = kernel_list(X_tr,X_te,kl)
    kb = kt.to_array()
    assert_array_almost_equal(kt[0],kb[0])
    assert_array_almost_equal(kt[3],kb[3])
    #test with the selected feature list
    fl = kl.__getitem__(3,'feature')
    k = rbf_kernel(X_tr[:,fl])
    assert_array_almost_equal(k,kl[3])
    #test with the function in list
    ff = kl.__getitem__(3,'func')
    k = ff(X_tr[:,fl],X_tr[:,fl])
    assert_array_equal(k,kl[3])
    #check that train and test use the same functions
    assert_array_equal(kl.__getitem__(2,'feature'),kt.__getitem__(2,'feature'))
    assert_array_equal(kl.__getitem__(7,'feature'),kt.__getitem__(7,'feature'))
    kt.T = X_tr #one trick to 
    assert_array_equal(kt[1],kl[1])

def check_toarray():
    kl = HPK_generator(X_tr).make_a_list(n)
    ka = kl.to_array()
    #check if to_array return an array with the same shape of the original kernel list
    assert_equal(kl.shape,ka.shape)
    #check if ka is a ndarray
    assert_equal(type(ka),np.ndarray)
    #check if ka and kl have the same kernels
    assert_array_equal(kl[1],ka[1])
    assert_array_equal(kl[9],ka[9])
    return

def check_concatenation():
    #check with 2 HPK
    kl1 = HPK_generator(X_tr).make_a_list(n)
    kl2 = HPK_generator(X_tr).make_a_list(n)
    kl3 = kl1+kl2
    assert_array_equal(kl1[1],kl3[1])
    assert_array_equal(kl1[7],kl3[7])
    assert_array_equal(kl2[1],kl3[n+1])
    assert_array_equal(kl2[4],kl3[n+4])
    #check with HPK and SFK
    del kl2,kl3,kl1
    kl1 = HPK_generator(X_tr).make_a_list(n)
    kl2 = SFK_generator(X_tr).make_a_list(n)
    kl3 = kl1+kl2
    assert_array_equal(kl1[1],kl3[1])
    assert_array_equal(kl1[7],kl3[7])
    assert_array_equal(kl2[1],kl3[n+1])
    assert_array_equal(kl2[4],kl3[n+4])
    #check iadd
    del kl2,kl3,kl1
    kl1 = SFK_generator(X_tr).make_a_list(n)
    kl2 = kernel_list(X_tr)
    kl2 += kl1
    assert_array_equal(kl1[3],kl2[3])
    assert_array_equal(kl1[9],kl2[9])
    kl3 = HPK_generator(X_tr).make_a_list(n)
    kl2 += kl3
    assert_array_equal(kl2[4],kl1[4])
    assert_array_equal(kl2[4+n],kl3[4])
    return

def check_simple_operations():
    ##check multiplication and division with a scalar value
    #check if normal division works and it does not change the operands
    kl1 = SFK_generator(X_tr).make_a_list(n)
    k = kl1[1]
    kl2 = kl1 / 10
    assert_array_almost_equal(kl2[1],k/10)
    kk = kl1[1]
    assert_array_almost_equal(k,kk)
    assert_array_almost_equal(kl2[6],kl1[6]/10)
    #check if idiv works correctly
    kl1 /= 10
    assert_array_almost_equal(kl1[2],kl2[2])
    #check if mul work correctly
    kl1 = SFK_generator(X_tr).make_a_list(n)
    k = kl1[1]
    kl2 = kl1 * 10
    assert_array_almost_equal(kl2[1],k*10)
    kk = kl1[1]
    assert_array_almost_equal(k,kk)
    assert_array_almost_equal(kl2[6],kl1[6]*10)
    #check if imul works correctly
    kl1 *= 10
    assert_array_almost_equal(kl1[2],kl2[2])
    return

def check_complex_operations():
    ##check multiplication and division with a scalar value
    #check if normal division works and it does not change the operands
    v = [i for i in range(1,11)]
    kl1 = HPK_generator(X_tr).make_a_list(n)
    k = kl1[3].copy()
    kl2 = kl1 / v
    assert_array_almost_equal(kl2[9],kl1[9]/v[9])
    assert_array_almost_equal(kl2[0],kl1[0]/v[0])
    assert_array_almost_equal(kl2[6],kl1[6]/v[6])
    assert_array_almost_equal(kl2[3],k/v[3])
    #normal div does not affect first operand
    assert_array_almost_equal(kl1[3],k)

    #check if idiv works correctly
    kl1 /= v
    assert_array_almost_equal(kl1[2],kl2[2])
    #check if mul works correctly
    kl1 = SFK_generator(X_tr).make_a_list(n)
    k = kl1[1]
    kl2 = kl1 * v
    assert_array_almost_equal(kl2[1],k*v[1])
    kk = kl1[1]
    assert_array_almost_equal(k,kk)
    assert_array_almost_equal(kl2[6],kl1[6]*v[6])
    #check if imul works correctly
    kl1 *= v
    assert_array_almost_equal(kl1[2],kl2[2])
    return



def check_edit():
    #check 'edit' with a simple transformation
    def stuff(X):
        return X*2
    kl = HPK_generator(X_tr).make_a_list(10)
    K = kl[2]    
    kl.edit(stuff)
    assert_array_almost_equal(K*2,kl[2])
    #check with normalization
    kl = HPK_generator(X_tr).make_a_list(10)
    K = kl[2]
    kl.edit(kernel_normalization)
    assert_array_almost_equal(kernel_normalization(K),kl[2])
    #check with kernel centering
    kl = HPK_generator(X_tr).make_a_list(10)
    K = kl[2]
    kl.edit(kernel_centering)
    assert_array_almost_equal(kernel_centering(K),kl[2])


def all_check():
    
    yield check_HPKs
    yield check_SFKs
    yield check_SFKs2
    yield check_edit

    yield check_init
    yield check_generated
    yield check_init_from_klist
    yield check_shape
    yield check_getitem
    yield check_toarray

    yield check_concatenation
    yield check_simple_operations
    yield check_complex_operations


def check_list():
    for check in all_check():
        check()



